{"version":3,"sources":["components/home/SearchBar.js","actions/searchActions.js","actions/types.js","components/home/FoodList.js","components/home/MealsContainer.js","components/home/Landing.js","reducers/searchReducer.js","reducers/index.js","store.js","App.js","components/home/Recipe.js","components/home/Router.js","serviceWorker.js","index.js"],"names":["SearchForm","onChange","e","props","searchMeal","target","value","onSubmit","preventDefault","fetchMeals","text","onClick","randomMeals","className","id","this","type","placeholder","Component","connect","state","meals","dispatch","payload","axios","get","then","response","data","catch","err","console","log","FoodList","meal","src","strMealThumb","alt","strMeal","data-mealid","idMeal","to","pathname","recipe","MealsContainer","content","length","map","index","key","Landing","componentDidMount","json","localStorage","getItem","recipes","JSON","parse","setState","componentDidUpdate","stringify","setItem","SearchBar","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","Recipe","activeRecipe","a","mealID","location","fetch","req","res","strInstructions","href","strSource","React","Router","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.01cdaa24.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./searchBar.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { searchMeal, fetchMeals, randomMeals } from \"../../actions/searchActions\";\r\n\r\nexport class SearchForm extends Component {\r\n  onChange = (e) => {\r\n    this.props.searchMeal(e.target.value);\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.fetchMeals(this.props.text);\r\n  };\r\n\r\n  onClick =() => {\r\n    this.props.randomMeals();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h1>Meal Finder</h1>\r\n          <div className=\"flex\">\r\n            <form className=\"flex\" id=\"submit\" onSubmit={this.onSubmit}>\r\n              <input\r\n                type=\"text\"\r\n                id=\"search\"\r\n                placeholder=\"Search for meals or keywords\"\r\n                onChange={this.onChange}\r\n              />\r\n              <button className=\"search-btn\" type=\"submit\">\r\n                <i className=\"fas fa-search\">Search</i>\r\n              </button>\r\n            </form>\r\n            <button className=\"random-btn\" id=\"random\" onClick={this.onClick}>\r\n              <i className=\"fas fa-random\">Random</i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  text: state.meals.text,\r\n});\r\n\r\nexport default connect(mapStateToProps, { searchMeal, fetchMeals,randomMeals })(SearchForm);\r\n","import { SEARCH_MEAL, FETCH_MEALS } from \"./types\";\r\nimport axios from \"axios\";\r\n\r\nexport const searchMeal = (text) => (dispatch) => {\r\n  dispatch({\r\n    type: SEARCH_MEAL,\r\n    payload: text,\r\n  });\r\n};\r\n\r\nexport const fetchMeals = (text) => (dispatch) => {\r\n  axios\r\n    .get(`https://www.themealdb.com/api/json/v1/1/search.php?s=${text}`)\r\n    .then((response) =>\r\n      dispatch({\r\n        type: FETCH_MEALS,\r\n        payload: response.data.meals,\r\n      })\r\n    )\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\n\r\nexport const randomMeals = () => (dispatch) => {\r\n  axios\r\n    .get(`https://www.themealdb.com/api/json/v1/1/random.php`)\r\n    .then((response) =>\r\n      dispatch({\r\n        type: FETCH_MEALS,\r\n        payload: response.data.meals,\r\n      })\r\n    )\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n","export const SEARCH_MEAL = \"SEARCH_MEAL\";\r\nexport const FETCH_MEALS = \"FETCH_MEALS\";\r\n","import React, { Component } from \"react\";\r\nimport \"./Components.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport class FoodList extends Component {\r\n  render() {\r\n    const { meal } = this.props;\r\n    \r\n    return (\r\n      <div className=\"meal\">\r\n        <img src={meal.strMealThumb} alt={meal.strMeal} />\r\n        <div className=\"meal-info\" data-mealid={meal.idMeal}> \r\n          <h3>{meal.strMeal}</h3>\r\n        </div>\r\n        <button className=\"recipe_buttons\">\r\n          <Link to={{ \r\n            pathname: `/recipe/${meal.idMeal}`,\r\n            state: { recipe: meal.idMeal }\r\n          }}>View Recipe</Link>\r\n        </button>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default FoodList;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport FoodList from \"./FoodList\";\r\n\r\nexport class MealsContainer extends Component {\r\n  render() {\r\n    const { meals } = this.props;\r\n    let content = \"\";\r\n    \r\n    if (meals === null) {\r\n      return <p>There are no search results. Try again!</p>;\r\n    } else {\r\n      content =\r\n        meals.length > 0\r\n          ? meals.map((meal,index) => <FoodList key ={index}  meal={meal} />)\r\n          : null;\r\n\r\n      return <div className=\"row\">{content}</div>;\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  meals: state.meals.meals,\r\n});\r\n\r\nexport default connect(mapStateToProps)(MealsContainer);\r\n","import React, { Component } from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport MealsContainer from \"./MealsContainer\";\r\n\r\nexport class Landing extends Component {\r\n  componentDidMount = () => {\r\n    const json = localStorage.getItem(\"recipes\");\r\n    const recipes = JSON.parse(json);\r\n    this.setState({ recipes });\r\n  }\r\n  componentDidUpdate = () => {\r\n    const recipes = JSON.stringify(this.state.recipes);\r\n    localStorage.setItem(\"recipes\", recipes);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <SearchBar />\r\n        <MealsContainer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Landing;\r\n","import { SEARCH_MEAL, FETCH_MEALS } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  text: \"\",\r\n  meals: [],\r\n  meal: [],\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case SEARCH_MEAL:\r\n      return {\r\n        ...state,\r\n        text: action.payload,\r\n      };\r\n    case FETCH_MEALS:\r\n      return {\r\n        ...state,\r\n        meals: action.payload,\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport searchReducer from \"./searchReducer\";\r\n\r\nexport default combineReducers({\r\n  meals: searchReducer,\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst middleware = [thunk];\r\nconst initialState = {};\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./App.css\";\r\nimport Landing from \"./components/home/Landing\";\r\n\r\nimport store from \"./store\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Landing />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Recipe extends React.Component {\r\n    state = {\r\n        activeRecipe: []\r\n    }\r\n    componentDidMount = async () => {\r\n        const mealID = this.props.location.state.recipe;\r\n        const req = await fetch(`https://www.themealdb.com/api/json/v1/1/lookup.php?i=${mealID}`);\r\n        \r\n        const res = await req.json();\r\n        this.setState({ activeRecipe: res.meals[0] });\r\n        console.log(this.state.activeRecipe);\r\n    }\r\n    render(){\r\n        const recipe = this.state.activeRecipe;\r\n        return (\r\n          <div className=\"container\">\r\n            { this.state.activeRecipe.length !== 0 &&\r\n              <div className=\"active-recipe\">\r\n                <img className=\"active-recipe__img\" src={recipe.strMealThumb} alt={recipe.strMeal}/>\r\n                <h3 className=\"active-recipe__title\">{ recipe.strMeal }</h3>\r\n                <h4 className=\"active-recipe__instructions\">\r\n                    Instructions: <span>{ recipe.strInstructions }</span>\r\n                </h4>\r\n                <p className=\"active-recipe__website\">Website: \r\n                  <span><a href={recipe.strSource}>{recipe.strSource}</a></span>\r\n                </p>\r\n                <button className=\"active-recipe__button\">\r\n                    <Link to=\"/\">Go Home</Link>\r\n                </button>\r\n              </div>\r\n            }\r\n          </div>\r\n        );\r\n    }\r\n    \r\n};\r\n\r\nexport default Recipe;","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\nimport App from \"../../App\";\r\nimport Recipe from \"./Recipe\";\r\n\r\nconst Router = () => (\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route path=\"/\" component={App}  exact/>\r\n      <Route path=\"/recipe/:id\" component={Recipe} />\r\n    </Switch>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Router from \"./components/home/Router\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}